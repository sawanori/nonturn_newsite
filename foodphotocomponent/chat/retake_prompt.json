
{
"version": "1.0",
"scope": "UI-only instructions to refine Chat modal (user-side) and Admin inbox (management-side). Keep current mock APIs; no DB wiring yet.",
"assumptions": {
"framework": "Next.js App Router + React + Tailwind",
"chat\_component": "components/ChatWidget.tsx (or equivalent)",
"admin\_pages": {
"inbox": "app/admin/inbox/page.tsx",
"thread": "components/admin/Thread.tsx",
"reply\_box": "components/admin/ReplyBox.tsx",
"list": "components/admin/ConversationList.tsx"
}
},
"shared": {
"selectors\_and\_data\_attrs": {
"open\_chat\_cta": "\[data-chat-open]",
"close\_chat\_btn": "\[data-chat-close]",
"chat\_modal\_root\_id": "chat-portal-root",
"toast\_container\_id": "toast-root"
},
"utilities": \[
{
"path": "lib/ui/toast.tsx",
"purpose": "Single-instance toast with dedupe; prevents multi-duplicate error popups.",
"content": "import { useEffect, useState } from 'react';\nlet lastKey = '';\nlet listener: ((m:{key\:string,type:'error'|'info'|'success',text\:string})=>void)|null = null;\nexport function pushToast(msg:{key\:string,type:'error'|'info'|'success',text\:string}){ if(msg.key===lastKey) return; lastKey=msg.key; listener?.(msg); }\nexport function ToastHost(){ const \[m,setM]=useState<any>(null); useEffect(()=>{ listener=(x)=>{ setM(x); setTimeout(()=>setM(null), 3000); }; return ()=>{listener=null;};},\[]); if(!m) return null; const color = m.type==='error'?'bg-red-600'\:m.type==='success'?'bg-green-600':'bg-slate-800'; return (\<div className={`fixed z-[100000] bottom-6 left-1/2 -translate-x-1/2 px-4 py-2 rounded-lg text-white shadow ${color}`}>{m.text}</div>); }\n"
},
{
"path": "lib/ui/useFocusTrap.ts",
"purpose": "A11y: trap focus inside modal; release on close.",
"content": "import { useEffect } from 'react';\nexport function useFocusTrap(enabled\:boolean, containerRef: React.RefObject<HTMLElement>){\n  useEffect(()=>{\n    if(!enabled || !containerRef.current) return;\n    const root = containerRef.current;\n    const focusable = () => Array.from(root.querySelectorAll<HTMLElement>("a\[href],button\:not(\[disabled]),textarea,input,select,\[tabindex]\:not(\[tabindex='-1'])"));\n    const first = () => focusable()\[0];\n    const last = () => { const f=focusable(); return f\[f.length-1]; };\n    const onKey=(e\:KeyboardEvent)=>{\n      if(e.key==='Tab'){\n        const fs = focusable(); if(fs.length===0) return; const active=document.activeElement as HTMLElement;\n        if(e.shiftKey && active===fs\[0]){ e.preventDefault(); last()?.focus(); }\n        else if(!e.shiftKey && active===fs\[fs.length-1]){ e.preventDefault(); first()?.focus(); }\n      }\n    };\n    document.addEventListener('keydown', onKey);\n    setTimeout(()=> first()?.focus(), 0);\n    return ()=> document.removeEventListener('keydown', onKey);\n  },\[enabled, containerRef]);\n}\n"
}
]
},
"chat": {
"goal": "Unify open behavior; improve accessibility and input UX; add quick chips and response-time hint.",
"tasks": \[
{
"id": "chat-001-unify-open",
"title": "All CTA buttons open the same modal",
"steps": \[
"Add data attribute data-chat-open to every '問い合わせ' CTA anchor/button across pages.",
"Mount a single ChatWidget launcher in root layout and intercept clicks on \[data-chat-open].",
"Prevent default when CTA is a link; call setOpen(true) to show the modal/drawer."
],
"code\_changes": \[
{
"path": "app/layout.tsx",
"diff": "/\* Ensure a portal root and ToastHost are present */\n{/* \<div id="chat-portal-root" /> ideally appended via a Portal component */}\nimport { ToastHost } from '@/lib/ui/toast';\nexport default function RootLayout({children}:{children\:React.ReactNode}){\n  return (\n    \<html lang="ja">\n      <body>\n        {children}\n        \<div id="chat-portal-root" />\n        <ToastHost />\n      </body>\n    </html>\n  );\n}\n"
},
{
"path": "components/ChatWidget.tsx",
"notes": "Add global click handler that opens modal when \[data-chat-open] is clicked.",
"content": "'use client';\nimport { useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useFocusTrap } from '@/lib/ui/useFocusTrap';\nimport { pushToast } from '@/lib/ui/toast';\n\nexport default function ChatWidget(){\n  const \[open,setOpen]=useState(false);\n  const \[sending,setSending]=useState(false);\n  const \[text,setText]=useState('');\n  const modalRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  useFocusTrap(open, modalRef);\n\n  useEffect(()=>{\n    const onClick=(e\:MouseEvent)=>{\n      const t = e.target as HTMLElement;\n      if(t.closest('\[data-chat-open]')){ e.preventDefault(); setOpen(true); }\n    };\n    document.addEventListener('click', onClick);\n    return ()=> document.removeEventListener('click', onClick);\n  },\[]);\n\n  useEffect(()=>{\n    if(open){\n      // autofocus + scroll to bottom\n      setTimeout(()=>{ inputRef.current?.focus(); listRef.current?.scrollTo({top: 999999, behavior:'smooth'}); }, 0);\n    }\n  },\[open]);\n\n  function onKeyDown(e: React.KeyboardEvent){ if(e.key==='Escape') setOpen(false); }\n\n  async function send(){\n    const v = text.trim(); if(!v) { pushToast({key:'empty', type:'error', text:'メッセージを入力してください'}); return; }\n    try{\n      setSending(true);\n      // mock send here; replace with real later\n      await new Promise(r=>setTimeout(r, 300));\n      setText('');\n      listRef.current?.scrollTo({top: 999999, behavior:'smooth'});\n    }catch(e\:any){ pushToast({key:'sendfail', type:'error', text:'送信に失敗しました'}); }\n    finally{ setSending(false); }\n  }\n\n  if(typeof document==='undefined') return null;\n  const root=document.getElementById('chat-portal-root');\n  if(!root) return null;\n\n  return createPortal(\n    <>\n      \<button aria-label="チャットを開く" className="fixed z-\[100000] bottom-4 right-4 rounded-full bg-blue-600 text-white px-4 py-3 shadow" onClick={()=>setOpen(true)}>ご相談</button>\n      {open && (\n        \<div role="dialog" aria-modal="true" aria-labelledby="chatTitle" className="fixed inset-0 z-\[100001] flex items-end sm\:items-center justify-center bg-black/30" onKeyDown={onKeyDown}>\n          \<div ref={modalRef} className="w-full sm\:w-\[420px] h-\[75vh] sm\:h-\[560px] bg-white rounded-t-2xl sm\:rounded-2xl shadow flex flex-col" style={{paddingBottom:'env(safe-area-inset-bottom)'}}>\n            \<header className="px-4 py-3 border-b flex items-center justify-between">\n              <div>\n                \<h2 id="chatTitle" className="font-semibold">ご相談チャット</h2>\n                \<p className="text-xs text-gray-500">通常5分以内に返信</p>\n              </div>\n              \<button data-chat-close onClick={()=>setOpen(false)} aria-label="閉じる" className="text-gray-500 hover\:text-gray-700">×</button>\n            </header>\n            \<div ref={listRef} className="flex-1 overflow-y-auto p-3 space-y-2">\n              {/* render mock messages here */}\n              \<div className="text-xs text-gray-500">はじめに、以下からお選びいただけます</div>\n              \<div className="flex flex-wrap gap-2">\n                {\['見積の目安','空き日程','所要時間','撮影事例'].map(label=> (\n                  \<button key={label} className="px-3 py-1 rounded-full bg-gray-100 hover\:bg-gray-200 text-sm" onClick={()=> setText(prev=> prev?prev:(label))}>{label}</button>\n                ))}\n              </div>\n            </div>\n            \<div className="border-t p-2 flex gap-2" style={{paddingBottom:'calc(env(safe-area-inset-bottom) + 8px)'}}>\n              \<input ref={inputRef} value={text} onChange={e=>setText(e.target.value)} onKeyDown={(e)=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); if(!sending) send(); } }} className="flex-1 border rounded-xl px-3 py-2" placeholder="メッセージを入力" aria-label="メッセージを入力" />\n              \<button onClick={send} disabled={sending || text.trim().length===0} className="px-3 py-2 rounded-xl bg-blue-600 text-white disabled\:opacity-50">{sending?'送信中…':'送信'}</button>\n            </div>\n          </div>\n        </div>\n      )}\n    \</>, root);\n}\n"
}
],
"acceptance": \[
"All buttons/links with data-chat-open open the same modal without navigation.",
"Modal traps focus, ESC closes, screen reader reads title via aria-labelledby.",
"On open: input focused; message list scrolled to bottom.",
"Mobile bottom padding respects safe-area; no overlap with home indicator."
]
},
{
"id": "chat-002-error-and-chips",
"title": "Single-instance error toast and quick chips",
"steps": \[
"Use ToastHost and pushToast for errors; key-based dedupe.",
"Pre-render 4 quick chips; clicking sets input if empty.",
"Disable Send button while sending or when input is empty."
],
"acceptance": \[
"Rapidly clicking Send with empty input shows only one toast within 3s.",
"Chips insert text exactly; no duplicates if input already has text."
]
}
]
},
"admin": {
"goal": "Improve triage and reply ergonomics while staying mock-only.",
"tasks": \[
{
"id": "admin-001-url-state",
"title": "Persist active conversation in URL (?c=)",
"steps": \[
"When a list row is clicked, setActiveId and update location: searchParams.set('c', id); history.replaceState.",
"On mount, read ?c and auto-select that conversation if present."
],
"code\_changes": \[
{
"path": "components/admin/ConversationList.tsx",
"content": "'use client';\n// inside onClick of a row\nonClick={()=>{ onSelect(it.id); const u=new URL(window\.location.href); u.searchParams.set('c', it.id); window\.history.replaceState(null,'',u.toString()); }}\n"
},
{
"path": "app/admin/inbox/page.tsx",
"content": "'use client';\nimport { useEffect, useState } from 'react';\nexport default function InboxPage(){\n  const \[activeId,setActiveId]=useState('');\n  useEffect(()=>{ const sp=new URLSearchParams(window\.location.search); const c=sp.get('c'); if(c) setActiveId(c); },\[]);\n  // ...render list + thread\n}\n"
}
],
"acceptance": \[
"Reloading the page maintains selected conversation.",
"Copy-pasting the URL opens the same conversation for another reviewer."
]
},
{
"id": "admin-002-sort",
"title": "Client-side sort by status then last\_message\_at desc",
"steps": \[
"Define order: open < in\_progress(optional) < closed; if only open/closed, use open first.",
"Then secondary sort: last\_message\_at desc."
],
"code\_changes": \[
{
"path": "components/admin/ConversationList.tsx",
"content": "const statusRank: Record\<string, number> = { open: 0, closed: 2 };\nfunction sortConvs(a\:any,b\:any){\n  const sr = (statusRank\[a.status]??1) - (statusRank\[b.status]??1);\n  if(sr!==0) return sr;\n  return new Date(b.last\_message\_at).getTime() - new Date(a.last\_message\_at).getTime();\n}\n// after fetching or on realtime update\nsetItems((prev)=> \[...(data??\[])].sort(sortConvs));\n"
}
],
"acceptance": \[
"Open conversations float to top; newest activity first within same status."
]
},
{
"id": "admin-003-draft",
"title": "Reply box auto-save draft per conversation",
"steps": \[
"Key: localStorage.setItem(`reply:${conversationId}`, text) on change (debounced 300ms).",
"On mount of ReplyBox, if no text state, read draft and populate.",
"On successful send, removeItem for that key."
],
"code\_changes": \[
{
"path": "components/admin/ReplyBox.tsx",
"content": "'use client';\nimport { useEffect, useMemo, useState } from 'react';\nexport function ReplyBox({ conversationId }:{conversationId\:string}){\n  const \[text,setText]=useState('');\n  useEffect(()=>{ const k=`reply:${conversationId}`; const v=localStorage.getItem(k); if(v) setText(v); },\[conversationId]);\n  useEffect(()=>{ const k=`reply:${conversationId}`; const h=setTimeout(()=> localStorage.setItem(k, text), 300); return ()=> clearTimeout(h); },\[text,conversationId]);\n  async function send(){ /* ...do send... */ localStorage.removeItem(`reply:${conversationId}`); setText(''); }\n  return (/* input + buttons with disabled state */);\n}\n"
}
],
"acceptance": \[
"Navigating away and back to a conversation restores the draft.",
"Sending clears the draft storage."
]
},
{
"id": "admin-004-send-ergonomics",
"title": "Prevent double submits; Enter to send; Shift+Enter newline",
"steps": \[
"Maintain isSending state; disable Send button during request.",
"In input textarea onKeyDown: if Enter && !Shift -> preventDefault + send().",
"If Shift+Enter: allow newline."
],
"code\_changes": \[
{
"path": "components/admin/ReplyBox.tsx",
"content": "'use client';\nimport { useState } from 'react';\nexport function ReplyBox({ conversationId }:{conversationId\:string}){\n  const \[text,setText]=useState('');\n  const \[isSending,setIsSending]=useState(false);\n  async function send(){ if(isSending) return; if(!text.trim()) return; setIsSending(true); try{ await fetch('/api/admin/reply',{method:'POST',headers:{'Content-Type':'application/json'},body\:JSON.stringify({conversationId,content\:text})}); setText(''); } finally { setIsSending(false); } }\n  return (\n    \<div className="border-t p-2 flex gap-2">\n      \<textarea value={text} onChange={e=>setText(e.target.value)} onKeyDown={(e)=>{ if(e.key==='Enter' && !e.shiftKey){ e.preventDefault(); send(); } }} className="flex-1 border rounded-xl px-3 py-2 min-h-\[44px]" placeholder="返信を入力" />\n      \<button onClick={send} disabled={isSending || !text.trim()} className="px-4 py-2 rounded-xl bg-blue-600 text-white disabled\:opacity-50">{isSending?'送信中…':'送信'}</button>\n    </div>\n  );\n}\n"
}
],
"acceptance": \[
"No duplicate messages even if Send clicked repeatedly or Enter spammed.",
"Shift+Enter inserts newline as expected."
]
},
{
"id": "admin-005-thread-header",
"title": "Show thread metadata in header",
"steps": \[
"In Thread component, render a sticky header bar above messages.",
"Fields (mock now): conversationId, channel (web), status, assigned\_to (mock), tags (array).",
"Visually separate with subtle background and badges."
],
"code\_changes": \[
{
"path": "components/admin/Thread.tsx",
"content": "'use client';\n// In return(): add a header block above list\n\<div className="sticky top-0 z-10 bg-white/90 backdrop-blur border-b px-4 py-2 flex items-center gap-2">\n  \<span className="text-xs text-gray-500">ID:</span>\<code className="text-xs">{conversationId}</code>\n  \<span className="ml-3 text-xs px-2 py-0.5 rounded-full bg-blue-100 text-blue-700">web</span>\n  \<span className="ml-1 text-xs px-2 py-0.5 rounded-full bg-gray-100 text-gray-700">open</span>\n  {/* tags mock */}\n  \<div className="ml-auto flex gap-1">{\['見積'].map(t=> \<span key={t} className="text-\[10px] px-2 py-0.5 rounded-full bg-slate-100">{t}</span>)}</div>\n</div>\n"
}
],
"acceptance": \[
"Header always visible while scrolling messages.",
"Metadata readable at a glance."
]
},
{
"id": "admin-006-skeletons",
"title": "Add empty and loading skeleton states",
"steps": \[
"ConversationList: if loading, render 6 gray placeholder rows.",
"If no items, show an empty prompt message.",
"Thread: while messages loading, show 6 message bubbles as skeletons."
],
"code\_changes": \[
{
"path": "components/admin/ConversationList.tsx",
"content": "const \[loading,setLoading]=useState(true);\nuseEffect(()=>{(async()=>{ setLoading(true); /* fetch */ setLoading(false); })();},\[]);\nif(loading){ return \<ul className="divide-y">{Array.from({length:6}).map((\_,i)=>(\<li key={i} className="p-3">\<div className="h-3 w-24 bg-gray-200 animate-pulse rounded"/>\<div className="mt-2 h-3 w-36 bg-gray-100 animate-pulse rounded"/></li>))}</ul>; }\nif(!items.length){ return \<div className="p-4 text-gray-500">未対応の会話はありません</div>; }\n"
},
{
"path": "components/admin/Thread.tsx",
"content": "const \[loading,setLoading]=useState(true);\nuseEffect(()=>{ (async()=>{ setLoading(true); /* fetch */ setLoading(false); })(); },\[conversationId]);\n{loading ? (\n  \<div className="p-4 space-y-2">\n    {Array.from({length:6}).map((\_,i)=>(\<div key={i} className={`${i%2?'text-right':'text-left'}`}>\<span className="inline-block rounded-2xl bg-gray-100 h-6 w-40 animate-pulse"></span></div>))}\n  </div>\n): (\n  /* real messages \*/\n)}\n"
}
],
"acceptance": \[
"While loading, skeletons are shown; on load, content replaces them smoothly.",
"Empty state clearly communicates no items."
]
}
]
},
"qa\_checklist": {
"chat": \[
"Clicking any CTA with data-chat-open opens the modal; URL does not change.",
"Screen reader announces dialog and title; Tab cycles within modal; ESC closes.",
"Input focused on open; list scrolled to bottom; safe area respected on iOS.",
"Send disabled for empty text and during sending; only one error toast appears per event.",
"Quick chips insert text when input is empty."
],
"admin": \[
"Selecting a conversation updates ?c and restores after reload.",
"Sorting shows open conversations first, then newest activity.",
"Draft persists per conversation; cleared after successful send.",
"Enter sends; Shift+Enter adds newline; no double messages.",
"Header shows ID/channel/status/tags; skeletons appear during loading."
]
}
}
